import { signInWithEmailAndPassword } from "firebase/auth";
import { useState } from "react";
import { auth, db } from "../firebase/config";
import { doc, getDoc } from "firebase/firestore";
import { useDispatch } from "react-redux";
import { setUser } from "@/features/user/userSlice";

export const useLogin = () => {
  const [error, setError] = useState<string>("");
  const [isPending, setIsPending] = useState(false);
  const dispatch = useDispatch();

  const login = async (email: string, password: string) => {
    setError("");
    setIsPending(true);

    try {
      // üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Firebase
      const response = await signInWithEmailAndPassword(auth, email, password);

      if (!response) {
        setError("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É");
        return null;
      }

      const user = response.user;

      // üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
      const token = await response.user.getIdToken();
      localStorage.setItem("token", token);
      console.log("‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ localStorage:", token);


      // üìö –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Firestore
      const userDocRef = doc(db, "users", user.uid);
      const userDocSnap = await getDoc(userDocRef);

      if (!userDocSnap.exists()) {
        setError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
        return null;
      }

      const userData = userDocSnap.data();

      // üßæ –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userWithRole = {
        email: user.email,
        uid: user.uid,
        role: userData.role || "user", // –µ—Å–ª–∏ –Ω–µ—Ç —Ä–æ–ª–∏ ‚Äî —Å—Ç–∞–≤–∏–º user
      };

      // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º Redux-—Å—Ç–µ–π—Ç
      dispatch(setUser(userWithRole));

      return userWithRole;
    } catch (err: any) {
      setError(err.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ");
      return null;
    } finally {
      setIsPending(false);
    }
  };

  return { login, error, isPending };
};
